# This is a basic workflow to help you get started with Actions
# run: dotnet test $env:Test_Project_Path --no-restore --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
#last
name: Only CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: '*'
  pull_request:
    branches: 'main'
#Variable de globales accesible desde todos los jobs:    
env:
    Solution_Name: src\WebApplicationDGP.sln
    Test_Project_Path: src\TestProject1\TestProject1.csproj       # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.      
    Wap_Project_Path: src\WebApplicationDGP/WebApplicationDGP.csproj                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    working_directory: src\WebApplicationDGP
    test_result_path: src\TestProject1\TestResults
    AZURE_WEBAPP_NAME_DEV: uksouth-iflx-shar-WebApplicationDGP-dev-app   # set this to your application's name
    AZURE_WEBAPP_PACKAGE_PATH: 'src\WebApplicationDGP\bin\Debug\netcoreapp3.1\publish\'      # set this to the path to your web app project, defaults to the repository root
    
jobs:
##############################################################################################################################################################################################

 

  build:
      strategy:
        matrix:
          dotnet-version: [ '3.1.x' ]
          
      runs-on: windows-latest         
                    
      steps:
        - uses: actions/checkout@v2
        - name: Setup dotnet
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: '3.1.x'
        - name: Install dependencies
          run: dotnet restore $env:Wap_Project_Path
        - name: Build
          run: dotnet build $env:Wap_Project_Path
##############################################################################################################################################################################################          
  TestUnitarios:

      runs-on: windows-latest
      needs: build

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject1\TestProject1.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject1/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##############################################################################################################################################################################################            
  ArtifactGenerate:
      runs-on: windows-latest
      needs: [build,TestUnitarios]
           
      steps:
        - uses: actions/checkout@v2
        - name: Publish
          run: dotnet publish $env:Wap_Project_Path
        - name: Show Branch NAME  
          run: echo ${{github.ref}}
        - name: Upload WebApp Build Artifact
          uses: actions/upload-artifact@v2
          with:
            name: WebAppDGP
            path: src/WebApplicationDGP/bin/Debug/netcoreapp3.1/publish/
##############################################################################################################################################################################################            
  PrintVariables:
      runs-on: ubuntu-latest
      #needs: [build,TestUnitarios]

      steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v2
