# This is a basic workflow to help you get started with Actions
# run: dotnet test $env:Test_Project_Path --no-restore --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
#last
name: WorkFlow CI / CD
concurrency: package
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
##############################################################################################################################################################################################
#create-variables
  create-variables:
      runs-on: ubuntu-latest
      # Map a step output to a job output 
      outputs:
        sha_short: ${{ steps.sha_short.outputs.sha_short }}
        branch_name: ${{ steps.branch_name.outputs.branch }}
        cmessage: ${{ steps.msg.outputs.msg }}
      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - id: sha_short
          run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        - id: branch_name
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        - id: msg
          run: echo "::set-output name=msg::${{  github.event_name == 'pull_request' && github.event.pull_request.title || github.event.head_commit.message }}"      
  ValidateMessage:
      runs-on: ubuntu-latest
      outputs:
        msg_bump: ${{ steps.CommitMSGtype.outputs.first_match }}
      needs: create-variables
      # Steps represent a sequence of tasks that will be executed as part of the job    
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        - name: Print Var Message
          run: |
            echo "commit message: ${{ needs.create-variables.outputs.cmessage }}"
        - name: Validate Commit MSG
          id: CommitMSG
          uses: AsasInnab/regex-action@v1
          with:
            regex_pattern: '(major|minor|patch|build|build|ci|docs|feat|fix|perf|refactor|test)(\((\w{0,15})\))?(\: .*\S.*)'
            regex_flags: 'gim'
            search_string: ${{ needs.create-variables.outputs.cmessage }}        
        - name: Echo commit MSG
          run: echo "commit mach is ${{ steps.CommitMSG.outputs.first_match }}"
        - name: compare msg
          run: echo "commit mach is '${{ steps.CommitMSG.outputs.first_match }}' and var is '${{ needs.create-variables.outputs.cmessage }}' "  
        - name: Exit with worng Commit Message        
          run: | 
            echo "Invalid Commit MSG: ${{ needs.create-variables.outputs.cmessage }}"
            exit 1
          if: steps.CommitMSG.outputs.first_match != needs.create-variables.outputs.cmessage  
        - name: Validate Commit MSG type
          id: CommitMSGtype
          uses: AsasInnab/regex-action@v1
          with:
            regex_pattern: '(major|minor|patch|build|build|ci|docs|feat|fix|perf|refactor|test)'
            regex_flags: 'gim'
            search_string: ${{ needs.create-variables.outputs.cmessage }}
        - name: Bump version and push tag
          id: tag_version
          uses: mathieudutour/github-tag-action@v5.6
          continue-on-error: ${{ (steps.CommitMSGtype.outputs.first_match == 'ci' || steps.CommitMSGtype.outputs.first_match == 'docs' || steps.CommitMSGtype.outputs.first_match == 'build' || steps.CommitMSGtype.outputs.first_match == 'refactor' || steps.CommitMSGtype.outputs.first_match == 'test' || steps.CommitMSGtype.outputs.first_match == 'perf') && true || false }}
          with:
            default_bump: ${{ steps.CommitMSGtype.outputs.first_match }}
            github_token: ${{ secrets.GITHUB_TOKEN }}
            dry_run: true
            #create_annotated_tag: true  
  Create-Label:
      runs-on: ubuntu-latest
      outputs:
        Package_version: ${{ steps.tag_version.outputs.new_tag }}
      needs: [ValidateMessage,create-variables]
      # Steps represent a sequence of tasks that will be executed as part of the job    
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        continue-on-error: ${{ (needs.ValidateMessage.outputs.msg_bump == 'ci' || needs.ValidateMessage.outputs.msg_bump == 'docs' || needs.ValidateMessage.outputs.msg_bump == 'build' || needs.ValidateMessage.outputs.msg_bump == 'refactor' || needs.ValidateMessage.outputs.msg_bump == 'test' || needs.ValidateMessage.outputs.msg_bump == 'perf') && true || false }}
        with:
          default_bump: ${{ needs.ValidateMessage.outputs.msg_bump }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: ${{  github.event_name == 'pull_request' && true || false }}
          #create_annotated_tag: true
      - uses: tzkhan/pr-update-action@v2
        if: github.event_name == 'pull_request'
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          base-branch-regex: '[a-z\d-_.\\/]+'
          head-branch-regex: '[a-z\d-_.\\/]+'
          #title-template: '[%headbranch%] '
          body-template: |
            tras el merge de la rama  %headbranch% se creara la siguiente etiqueta con estas caracteristicas:
            ${{ steps.tag_version.outputs.changelog }}
          #[Link to %headbranch%](https://url/to/browse/ticket/%headbranch%)
          body-update-action: 'replace'
          #body-uppercase-base-match: false
        # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5        
          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          tag: ${{ needs.Create-Label.outputs.Package_version }}
          #   config-name: my-config.yml
          #   disable-autolabeler: true
        env:        
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

##############################################################################################################################################################################################            

  build:
      strategy:
        matrix:
          dotnet-version: [ '3.1.x' ]
          Browser: [IE, Chrome, FireFox]
      runs-on: windows-latest
      needs: ValidacionSemanticRelease
      
      env:
          Solution_Name: src\WebApplicationDGP.sln
          Test_Project_Path: src\TestProject1\TestProject1.csproj       # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.      
          Wap_Project_Path: src\WebApplicationDGP/WebApplicationDGP.csproj                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
          working_directory: src\WebApplicationDGP
          test_result_path: src\TestProject1\TestResults
          #AZURE_WEBAPP_NAME_DEV: uksouth-iflx-shar-WebApplicationDGP-dev-app   # set this to your application's name
          #AZURE_WEBAPP_PACKAGE_PATH: 'src\WebApplicationDGP\bin\Debug\netcoreapp3.1\publish\'      # set this to the path to your web app project, defaults to the repository root
          

          
      steps:
        - uses: actions/checkout@v2
        - name: Setup dotnet
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: '3.1.x'
        - name: Install dependencies
          run: dotnet restore $env:Wap_Project_Path
        - name: Build
          run: dotnet build $env:Wap_Project_Path
##############################################################################################################################################################################################          
  TestUnitarios:

      runs-on: windows-latest
      needs: build

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject1\TestProject1.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject1/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##############################################################################################################################################################################################
  TagGeneration:

      runs-on: windows-latest
      needs: TestUnitarios

      steps:

      - name: 'Tag Generation'
        run: echo "Generada nueva tag"
##############################################################################################################################################################################################            

##############################################################################################################################################################################################            
  ArtifactGenerateWithTag:
      runs-on: windows-latest
      needs: [TagGeneration]
      env:
          Wap_Project_Path: src\WebApplicationDGP/WebApplicationDGP.csproj  
      steps:
        - uses: actions/checkout@v2
        - name: Publish
          run: dotnet publish $env:Wap_Project_Path
        - name: Show Branch NAME  
          run: echo ${{github.ref}}
        - name: Upload WebApp Build Artifact
          uses: actions/upload-artifact@v2
          with:
            name: WebAppDGP
            path: src/WebApplicationDGP/bin/Debug/netcoreapp3.1/publish/
##############################################################################################################################################################################################

  DeployandTestQA:
    
      runs-on: windows-latest
      environment: QA
      concurrency: QualityAssurance
      needs: [ArtifactGenerateWithTag]
      #if: github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME_QA: uksouth-iflx-shar-WebApplicationDGP-qa-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: 'Check Infra QA'
        run: echo "Infra OK"

      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_QA.json > appsettings.json
          type appsettings.json

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_QA }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      - name: Smoke Test QA
        run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
      - name: trx-parser
        uses: NasAmin/trx-parser@v0.2.0
        id: trx-parser
        with:
          TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}                     


##############################################################################################################################################################################################
  DeployandTestPRE:
    
      runs-on: windows-latest
      environment: PRE
      concurrency: PREPRO
      needs: [DeployandTestQA]
      #if: success() && github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME: uksouth-iflx-shar-WebApplicationDGP-dev-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: 'Check Infra PRE'
        run: echo "Infra OK"

      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_PRE.json > appsettings.json
          type appsettings.json       

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_DEV }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEV }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Smoke Test PRE
        run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
      - name: trx-parser
        uses: NasAmin/trx-parser@v0.2.0
        id: trx-parser
        with:
          TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}              
##############################################################################################################################################################################################
  DeployandTestPRO:
    
      runs-on: windows-latest
      environment: PRO
      concurrency: PRODUCTION
      needs: [DeployandTestPRE]
      #if: success() && github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME_QA: uksouth-iflx-shar-WebApplicationDGP-qa-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: 'Check Infra PRE'
        run: echo "Infra OK"

      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_PRO.json > appsettings.json
          type appsettings.json        

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_QA }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

          
      - name: Test PRODUCTION 
        run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
      - name: trx-parser
        uses: NasAmin/trx-parser@v0.2.0
        id: trx-parser
        with:
          TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}             
##############################################################################################################################################################################################
