# This is a basic workflow to help you get started with Actions
# run: dotnet test $env:Test_Project_Path --no-restore --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
#last
name: WorkFlow CI / CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: '*'
  pull_request:
    branches: 'main'

jobs:
##############################################################################################################################################################################################
  ValidacionSemanticRelease:

      runs-on: windows-latest

      steps:

      - name: 'Check Semantic-Release'
        run: echo "Semantic-Release OK"
##############################################################################################################################################################################################            

  build:
      strategy:
        matrix:
          dotnet-version: [ '3.1.x' ]
          type: [unitarias]
      runs-on: windows-latest
      needs: ValidacionSemanticRelease
      
      env:
          Solution_Name: src\WebApplicationDGP.sln
          Test_Project_Path: src\TestProject1\TestProject1.csproj       # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.      
          Wap_Project_Path: src\WebApplicationDGP/WebApplicationDGP.csproj                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
          working_directory: src\WebApplicationDGP
          test_result_path: src\TestProject1\TestResults
          AZURE_WEBAPP_NAME_DEV: uksouth-iflx-shar-WebApplicationDGP-dev-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src\WebApplicationDGP\bin\Debug\netcoreapp3.1\publish\'      # set this to the path to your web app project, defaults to the repository root
          

          
      steps:
        - uses: actions/checkout@v2
        - name: Setup dotnet
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: '3.1.x'
        - name: Install dependencies
          run: dotnet restore $env:Wap_Project_Path
        - name: Build
          run: dotnet build $env:Wap_Project_Path
##############################################################################################################################################################################################          
  TestUnitarios:

      runs-on: windows-latest
      needs: build

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject1\TestProject1.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject1/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##############################################################################################################################################################################################
  TagGeneration:

      runs-on: windows-latest
      needs: TestUnitarios

      steps:

      - name: 'Tag Generation'
        run: echo "Generada nueva tag"
##############################################################################################################################################################################################            

##############################################################################################################################################################################################            
  ArtifactGenerateWithTag:
      runs-on: windows-latest
      needs: [TagGeneration]
      env:
          Wap_Project_Path: src\WebApplicationDGP/WebApplicationDGP.csproj  
      steps:
        - uses: actions/checkout@v2
        - name: Publish
          run: dotnet publish $env:Wap_Project_Path
        - name: Show Branch NAME  
          run: echo ${{github.ref}}
        - name: Upload WebApp Build Artifact
          uses: actions/upload-artifact@v2
          with:
            name: WebAppDGP
            path: src/WebApplicationDGP/bin/Debug/netcoreapp3.1/publish/
##############################################################################################################################################################################################
  DonwloadArtifactWithTag:

      runs-on: windows-latest
      needs: ArtifactGenerateWithTag

      steps:

      - name: 'Download Artefact'
        run: echo "Artefact Downloaded"
##############################################################################################################################################################################################
##############################################################################################################################################################################################
  CheckInfraQA:

      runs-on: windows-latest
      needs: DonwloadArtifactWithTag

      steps:

      - name: 'Existe infra'
        run: echo "Infra OK"
##############################################################################################################################################################################################
  DeployQA:
    
      runs-on: windows-latest
      environment: QA
      needs: [CheckInfraQA]
      #if: github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME_QA: uksouth-iflx-shar-WebApplicationDGP-qa-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_QA.json > appsettings.json
          type appsettings.json

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_QA }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_QA }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
##############################################################################################################################################################################################
        
  SmokeTestQA:

      runs-on: windows-latest
      needs: DeployQA

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}                     
##############################################################################################################################################################################################
##############################################################################################################################################################################################
  CheckInfraPRE:

      runs-on: windows-latest
      needs: SmokeTestQA

      steps:

      - name: 'Existe infra'
        run: echo "Infra OK"
##############################################################################################################################################################################################
  DeployPRE:
    
      runs-on: windows-latest
      environment: PRE
      needs: [CheckInfraPRE]
      #if: success() && github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME_DEV: uksouth-iflx-shar-WebApplicationDGP-dev-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_PRE.json > appsettings.json
          type appsettings.json       

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_DEV }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEV }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
##############################################################################################################################################################################################
        
  TestCorePRE:

      runs-on: windows-latest
      needs: DeployPRE

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}                     
##############################################################################################################################################################################################
##############################################################################################################################################################################################
  CheckInfraPRO:

      runs-on: windows-latest
      needs: TestCorePRE

      steps:

      - name: 'Existe infra'
        run: echo "Infra OK"
##############################################################################################################################################################################################
  DeployPRO:
    
      runs-on: windows-latest
      environment: PRO
      needs: [CheckInfraPRO]
      #if: success() && github.ref == 'refs/heads/main'

      env:
          AZURE_WEBAPP_NAME_QA: uksouth-iflx-shar-WebApplicationDGP-qa-app   # set this to your application's name
          AZURE_WEBAPP_PACKAGE_PATH: 'src/WebApplicationDGP/path/to/artifact/'      # set this to the path to your web app project, defaults to the repository root
      
      steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: DownloadArtifact
        uses: actions/download-artifact@v2
        with:
          name: WebAppDGP
          path: src/WebApplicationDGP/path/to/artifact
          
      - name: 'Set Environment'
        run: |
          dir D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact
          cd D:\a\WebApplicationDGP\WebApplicationDGP\src\WebApplicationDGP\path\to\artifact\
          type appsettings_PRO.json > appsettings.json
          type appsettings.json        

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_QA }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_QA }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
##############################################################################################################################################################################################
        
  TestSmokePRO:

      runs-on: windows-latest
      needs: DeployPRO

      steps:
        - uses: actions/checkout@v2
        - name: Test with the dotnet CLI
          run: dotnet test src\TestProject2\TestProject2.csproj --logger trx --results-directory src\TestProject1\TestResults
 # Using the trx-parser action
        - name: trx-parser
          uses: NasAmin/trx-parser@v0.2.0
          id: trx-parser
          with:
            TRX_PATH: ${{ github.workspace }}/src/TestProject2/TestResults #This should be the path to your TRX files
            REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}                     
##############################################################################################################################################################################################
